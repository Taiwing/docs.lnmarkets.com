{
  "openapi": "3.0.3",
  "info": {
    "title": "LN Markets API",
    "description": "Trade derivatives on the **[Lightning Network](https://lightning.network/)**.\nYou can find our website **[here](https://lnmarkets.com/)**.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.lnmarkets.com/v1",
      "description": "Mainnet API"
    },
    {
      "url": "https://api.testnet.lnmarkets.com/v1",
      "description": "Testnet API"
    }
  ],
  "tags": [
    {
      "name": "Login",
      "description": "Here you can find the different way to auth yourself on LN Markets, mostly use for browser."
    },
    {
      "name": "Futures",
      "description": "Interactions with the futures market."
    },
    {
      "name": "Options",
      "description": "Interactions with the options market."
    },
    {
      "name": "User",
      "description": "Interaction with your user data."
    },
    {
      "name": "App",
      "description": "LN Markets application information."
    },
    {
      "name": "LNURL",
      "description": "Interaction with the lightning network using the [LNURL procotocol](https://github.com/btcontract/lnurl-rfc/)\nLNURL enable simple auth, withdraw and pay UX / UI.\n"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "description": "Api key auth is using `LNM-ACCESS-KEY` `LNM-ACCESS-PASSPHRASE` `LNM-ACCESS-TIMESTAMP` `LNM-ACCESS-SIGN` headers\n(Only one header is shown below because our docs engine does not allow to put more there)\nSee (here)[https://docs.lnmarkets.com/api/v1/#section/REST-API/Authentication]\n",
        "type": "apiKey",
        "in": "header",
        "name": "LNM-ACCESS-KEY"
      }
    }
  },
  "paths": {
    "/app/configuration": {
      "get": {
        "tags": [
          "App"
        ],
        "security": [],
        "summary": "Configuration",
        "description": "Retrieves the configuration of LN Markets",
        "responses": {
          "200": {
            "description": "App configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "max_withdraw_amount": {
                      "type": "number"
                    },
                    "min_deposit_amount": {
                      "type": "number"
                    },
                    "min_withdraw_amount": {
                      "type": "number"
                    }
                  },
                  "example": {
                    "max_withdraw_amount": 2000000,
                    "min_withdraw_amount": 1000,
                    "min_deposit_amount": 1000
                  }
                }
              }
            }
          }
        }
      }
    },
    "/app/node": {
      "get": {
        "tags": [
          "App"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Node",
        "description": "Shows information about the lightning node.",
        "responses": {
          "200": {
            "description": "Node informations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "description": "LND version",
                      "type": "string"
                    },
                    "alias": {
                      "description": "Node Alias",
                      "type": "string"
                    },
                    "pubkey": {
                      "description": "Node pubkey",
                      "type": "string"
                    },
                    "uri": {
                      "description": "Node URI",
                      "type": "string"
                    },
                    "onionUri": {
                      "description": "Node URI on tor",
                      "type": "string"
                    },
                    "peers": {
                      "description": "Number of peers",
                      "type": "integer",
                      "format": "int64"
                    },
                    "channels": {
                      "description": "Number of channels",
                      "type": "integer",
                      "format": "int64"
                    },
                    "localBalance": {
                      "description": "Node local balance",
                      "type": "integer",
                      "format": "int64"
                    },
                    "remoteBalance": {
                      "description": "Node remote balance",
                      "type": "integer",
                      "format": "int64"
                    },
                    "blockHeight": {
                      "description": "Node block height",
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "example": {
                    "version": "0.11.0-beta commit=v0.11.0-beta",
                    "alias": "LN Markets",
                    "pubkey": "03bae2db4b57738c1ec1ffa1c5e5a4423968cc592b3b39cddf7d495e72919d6431",
                    "blockHeight": 1835008,
                    "remoteBalance": 266903254,
                    "localBalance": 266903254,
                    "channels": 1337,
                    "peers": 42,
                    "onionUri": "03bae2db4b57738c1ec1ffa1c5e5a4423968cc592b3b39cddf7d495e72919d6431@3pv4ci27cnahbztwlqtbez36rblecanoyxthrtjvxpk3en2y7dxfr3id.onion:9735",
                    "uri": "03bae2db4b57738c1ec1ffa1c5e5a4423968cc592b3b39cddf7d495e72919d6431@34.192.102.161:9735"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/add-margin": {
      "post": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_modify"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Add margin",
        "description": "Add margin to a running position.",
        "requestBody": {
          "description": "Payload with data relative to the process.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "amount",
                  "pid"
                ],
                "properties": {
                  "amount": {
                    "description": "Amount of margin to add (in sats)",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 1
                  },
                  "pid": {
                    "description": "Position ID from which to retrieve PL",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                  }
                },
                "example": {
                  "amount": 1000,
                  "pid": "99c470e1-2e03-4486-a37f-1255e08178b1"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Margin successfully added and new position information are sent back.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "description": "UUID of the position",
                      "type": "string"
                    },
                    "id": {
                      "description": "Position ID to be deprecated",
                      "type": "string"
                    },
                    "type": {
                      "description": "Position type [l,m]",
                      "type": "string",
                      "enum": [
                        "l",
                        "m"
                      ]
                    },
                    "side": {
                      "description": "Side of the position [s,b]",
                      "type": "string",
                      "enum": [
                        "s",
                        "b"
                      ]
                    },
                    "price": {
                      "description": "Entry price of the position",
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity of the position",
                      "type": "string"
                    },
                    "margin": {
                      "description": "Margin used for the position creation",
                      "type": "string"
                    },
                    "leverage": {
                      "description": "Leverage of the position",
                      "type": "string"
                    },
                    "liquidation": {
                      "description": "Liquidation level when the position will be closed",
                      "type": "string"
                    },
                    "market_filled_ts": {
                      "description": "When the order was filled",
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "market_wi": {
                      "description": "Market working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ]
                    },
                    "pl": {
                      "description": "PL of the position",
                      "type": "string"
                    },
                    "margin_wi": {
                      "description": "Margin working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ]
                    },
                    "stoploss": {
                      "description": "stoploss level",
                      "type": "string",
                      "nullable": true
                    },
                    "stoploss_wi": {
                      "description": "Stoploss working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ],
                      "nullable": true
                    },
                    "takeprofit": {
                      "description": "Takeprofit level",
                      "type": "string",
                      "nullable": true
                    },
                    "takeprofit_wi": {
                      "description": "Takeprofit working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ],
                      "nullable": true
                    },
                    "creation_ts": {
                      "description": "When the position was created",
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "example": {
                    "pid": "249dc818-f8a5-4713-a3a3-8fe85f2e8969",
                    "id": 666,
                    "type": "m",
                    "takeprofit_wi": "running",
                    "takeprofit": 13337,
                    "stoploss_wi": "running",
                    "stoploss": 1337,
                    "side": "s",
                    "quantity": 42,
                    "price": 8888,
                    "pl": -13640,
                    "market_wi": "filled",
                    "market_filled_ts": "020-09-15T10:50:40.332Z",
                    "margin_wi": "running",
                    "margin": 424242,
                    "liquidation": 1000,
                    "leverage": 50,
                    "creation_ts": "020-09-15T10:50:40.332Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/all/cancel": {
      "delete": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_close"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Cancel-all",
        "description": "Cancel all open positions",
        "responses": {
          "200": {
            "description": "Array with canceled positions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "canceled": {
                        "description": "Is position canceled",
                        "type": "boolean"
                      },
                      "closed_ts": {
                        "description": "Position canceled ts",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                      },
                      "pid": {
                        "description": "Position id",
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "data": [
                      {
                        "pid": "a2ca6172-1078-463d-ae3f-8733f36a9b0e",
                        "canceled_ts": "020-10-15T10:50:40.332Z",
                        "canceled": true,
                        "margin": 1337
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/all/close": {
      "delete": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_close"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Close-all",
        "description": "Close every user position. The PL will be calculated against the current bid or offer\ndepending on the side of the position.\n",
        "responses": {
          "200": {
            "description": "Every position has been successfully closed\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "closed": {
                        "description": "Is position closed",
                        "type": "boolean"
                      },
                      "closed_ts": {
                        "description": "Position closed ts",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                      },
                      "exit_price": {
                        "description": "At which price the position was closed",
                        "type": "string"
                      },
                      "pid": {
                        "description": "Position id",
                        "type": "string"
                      },
                      "pl": {
                        "description": "PL of the position",
                        "type": "integer"
                      }
                    }
                  },
                  "example": {
                    "data": [
                      {
                        "pid": "a2ca6172-1078-463d-ae3f-8733f36a9b0e",
                        "exit_price": 2000,
                        "closed_ts": "020-10-15T10:50:40.332Z",
                        "closed": true,
                        "pl": 1337
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/cancel": {
      "post": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_close"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Cancel",
        "description": "Cancel the position linked to the given `pid`.**Only works on positions that are not currently filled**.\n",
        "requestBody": {
          "description": "Payload containing the position id that will be cancelled.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "pid"
                ],
                "properties": {
                  "pid": {
                    "description": "Position ID",
                    "type": "string",
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
                  }
                },
                "example": {
                  "pid": "b87eef8a-52ab-2fea-1adc-c41fba870b0f"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Position is canceled\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canceled": {
                      "description": "Cancel success",
                      "type": "boolean"
                    },
                    "closed_ts": {
                      "description": "When the position was canceled",
                      "type": "string",
                      "format": "date-time"
                    },
                    "pid": {
                      "description": "Position ID",
                      "type": "string",
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
                    }
                  },
                  "example": {
                    "pid": "b87eef8a-52ab-2fea-1adc-c41fba870b0f",
                    "canceled": true,
                    "closed_ts": "020-11-15T10:50:40.332Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/carry-fees": {
      "get": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_get_closed"
            ]
          }
        ],
        "summary": "Carry fees history",
        "description": "Retrieves carry fees for user",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Starting timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162757621
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Ending timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162857621
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "minimum": 1,
              "maximum": 100,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Carry fees event of the position",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ts": {
                        "description": "Timestamp in ms when the fixing occurred",
                        "type": "integer",
                        "format": "int64"
                      },
                      "pid": {
                        "description": "Position id",
                        "type": "string",
                        "format": "uuid"
                      },
                      "fixing": {
                        "description": "Fixing uuid",
                        "type": "string",
                        "format": "uuid"
                      },
                      "fees": {
                        "description": "Fees that were taken from the position",
                        "type": "number"
                      }
                    }
                  },
                  "example": {
                    "data": [
                      {
                        "fixing": "fc342986-f59d-43f7-937b-0dcaa74b5f20",
                        "index": 1337
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/cash-in": {
      "post": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_modify"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Cash-in",
        "description": "Retrieves part of one running positions PL.\n",
        "requestBody": {
          "description": "Payload with data relative to the process.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "amount",
                  "pid"
                ],
                "properties": {
                  "amount": {
                    "description": "Amount of PL to cash-in (in sats)",
                    "type": "integer",
                    "format": "int64",
                    "minimum": 1
                  },
                  "pid": {
                    "description": "Position ID from which to retrieve PL",
                    "type": "string",
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                  }
                },
                "example": {
                  "amount": 1000,
                  "pid": "99c470e1-2e03-4486-a37f-1255e08178b1"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cash-in successfully retrieved and new position information are sent back.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "description": "UUID of the position",
                      "type": "string"
                    },
                    "id": {
                      "description": "Position ID to be deprecated",
                      "type": "string"
                    },
                    "type": {
                      "description": "Position type [l,m]",
                      "type": "string",
                      "enum": [
                        "l",
                        "m"
                      ]
                    },
                    "side": {
                      "description": "Side of the position [s,b]",
                      "type": "string",
                      "enum": [
                        "s",
                        "b"
                      ]
                    },
                    "price": {
                      "description": "Entry price of the position",
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity of the position",
                      "type": "string"
                    },
                    "margin": {
                      "description": "Margin used for the position creation",
                      "type": "string"
                    },
                    "leverage": {
                      "description": "Leverage of the position",
                      "type": "string"
                    },
                    "liquidation": {
                      "description": "Liquidation level when the position will be closed",
                      "type": "string"
                    },
                    "market_filled_ts": {
                      "description": "When the order was filled",
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "market_wi": {
                      "description": "Market working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ]
                    },
                    "pl": {
                      "description": "PL of the position",
                      "type": "string"
                    },
                    "margin_wi": {
                      "description": "Margin working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ]
                    },
                    "stoploss": {
                      "description": "stoploss level",
                      "type": "string",
                      "nullable": true
                    },
                    "stoploss_wi": {
                      "description": "Stoploss working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ],
                      "nullable": true
                    },
                    "takeprofit": {
                      "description": "Takeprofit level",
                      "type": "string",
                      "nullable": true
                    },
                    "takeprofit_wi": {
                      "description": "Takeprofit working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ],
                      "nullable": true
                    },
                    "creation_ts": {
                      "description": "When the position was created",
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "example": {
                    "pid": "249dc818-f8a5-4713-a3a3-8fe85f2e8969",
                    "id": 666,
                    "type": "m",
                    "takeprofit_wi": "running",
                    "takeprofit": 13337,
                    "stoploss_wi": "running",
                    "stoploss": 1337,
                    "side": "s",
                    "quantity": 42,
                    "price": 8888,
                    "pl": -13640,
                    "market_wi": "filled",
                    "market_filled_ts": "020-09-15T10:50:40.332Z",
                    "margin_wi": "running",
                    "margin": 424242,
                    "liquidation": 1000,
                    "leverage": 50,
                    "creation_ts": "020-09-15T10:50:40.332Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures": {
      "delete": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_close"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Close",
        "description": "Close the user position, the PL will be calculated against the current bid or offer\ndepending on the side of the position\n",
        "parameters": [
          {
            "name": "pid",
            "in": "query",
            "description": "ID of the position to close.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "example": "a2ca6172-1078-463d-ae3f-8733f36a9b0e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Position is closed\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "closed": {
                      "description": "Is position closed",
                      "type": "boolean"
                    },
                    "closed_ts": {
                      "description": "Position closed ts",
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "exit_price": {
                      "description": "At which price the position was closed",
                      "type": "string"
                    },
                    "pid": {
                      "description": "Position id",
                      "type": "string"
                    },
                    "pl": {
                      "description": "PL of the position",
                      "type": "integer"
                    }
                  },
                  "example": {
                    "pid": "a2ca6172-1078-463d-ae3f-8733f36a9b0e",
                    "exit_price": 2000,
                    "closed_ts": "020-10-15T10:50:40.332Z",
                    "closed": true,
                    "pl": 1337
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_get_open",
              "positions_get_closed"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Positions",
        "description": "Fetch users positions",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Choose which kind of positions you need to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "running",
                "closed"
              ],
              "example": "open",
              "default": "running"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Starting timestamp (in ms) (only used for closed positions)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162757621
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Ending timestamp (in ms) (only used for closed positions)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162857621
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows (only used for closed positions)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "minimum": 1,
              "maximum": 100,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Positions history successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "pid": {
                        "description": "id of the position",
                        "type": "string",
                        "format": "uuid"
                      },
                      "type": {
                        "description": "Position type [l,m]",
                        "type": "string",
                        "enum": [
                          "l",
                          "m"
                        ]
                      },
                      "side": {
                        "description": "Side of the position [s,b]",
                        "type": "string",
                        "enum": [
                          "s",
                          "b"
                        ]
                      },
                      "pl": {
                        "description": "PL of the position",
                        "type": "number"
                      },
                      "price": {
                        "description": "Entry price of the position",
                        "type": "number"
                      },
                      "quantity": {
                        "description": "Quantity of the position",
                        "type": "number"
                      },
                      "leverage": {
                        "description": "Leverage of the position",
                        "type": "number"
                      },
                      "liquidation": {
                        "description": "Liquidation level when the position will be closed",
                        "type": "number"
                      },
                      "margin": {
                        "description": "Margin used for the position creation",
                        "type": "number"
                      },
                      "margin_wi": {
                        "description": "Margin working indicator [filled, running, closed, canceled]",
                        "type": "string",
                        "enum": [
                          "filled",
                          "running",
                          "closed",
                          "canceled"
                        ]
                      },
                      "market_filled_ts": {
                        "description": "When the order was filled",
                        "type": "number",
                        "nullable": true
                      },
                      "market_wi": {
                        "description": "Market working indicator [filled, running, closed, canceled]",
                        "type": "string",
                        "enum": [
                          "filled",
                          "running",
                          "closed",
                          "canceled"
                        ]
                      },
                      "canceled": {
                        "description": "Is the position canceled",
                        "type": "boolean"
                      },
                      "closed": {
                        "description": "Is the position closed",
                        "type": "boolean"
                      },
                      "closed_ts": {
                        "description": "When the position was closed",
                        "type": "number",
                        "nullable": true
                      },
                      "creation_ts": {
                        "description": "When the position was created",
                        "type": "number",
                        "format": "date-time"
                      },
                      "exit_price": {
                        "description": "At which price the position was closed",
                        "type": "number",
                        "nullable": true
                      },
                      "stoploss": {
                        "description": "stoploss level",
                        "type": "number",
                        "nullable": true
                      },
                      "stoploss_wi": {
                        "description": "Stoploss working indicator [filled, running, closed, canceled]",
                        "type": "string",
                        "enum": [
                          "filled",
                          "running",
                          "closed",
                          "canceled"
                        ],
                        "nullable": true
                      },
                      "takeprofit": {
                        "description": "Takeprofit level",
                        "type": "string",
                        "nullable": true
                      },
                      "takeprofit_wi": {
                        "description": "Takeprofit working indicator [filled, running, closed, canceled]",
                        "type": "string",
                        "enum": [
                          "filled",
                          "running",
                          "closed",
                          "canceled"
                        ],
                        "nullable": true
                      },
                      "sum_carry_fees": {
                        "description": "Sum of the positions carry fees",
                        "type": "integer"
                      }
                    }
                  },
                  "example": {
                    "positions": [
                      {
                        "pid": "249dc818-f8a5-4713-a3a3-8fe85f2e8969",
                        "id": 666,
                        "type": "m",
                        "takeprofit_wi": "canceled",
                        "takeprofit": 13337,
                        "stoploss_wi": "canceled",
                        "stoploss": 1337,
                        "sign": -1,
                        "side": "s",
                        "quantity": 42,
                        "price": 8888,
                        "pl": -13640,
                        "market_wi": "filled",
                        "market_filled_ts": 1630568137340,
                        "margin_wi": "closed",
                        "margin": 424242,
                        "liquidation": 1000,
                        "leverage": 50,
                        "exit_price": 2000,
                        "creation_ts": 1630568137340,
                        "closed_ts": 1630568137340,
                        "closed": false,
                        "canceled": true,
                        "sum_carry_fees": 4242
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_create"
            ]
          }
        ],
        "deprecated": false,
        "summary": "New position",
        "description": "Send the order form parameters to add a new position in database.\n**If `type=\"l\"`, the property `price` must be included in the request to know when the position should be filled.**\n**You can choose to use the margin or the quantity as a parameter, the other will be calculated with the one you chose**\n",
        "requestBody": {
          "description": "Body with all the information needed to setup a new position.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "side",
                  "type",
                  "leverage"
                ],
                "properties": {
                  "type": {
                    "description": "Type of the order (Market or Limit)",
                    "type": "string",
                    "enum": [
                      "l",
                      "m"
                    ]
                  },
                  "side": {
                    "description": "Side of the order (Buy or Sell)",
                    "type": "string",
                    "enum": [
                      "b",
                      "s"
                    ]
                  },
                  "margin": {
                    "description": "Margin or quantity should be filled",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "leverage": {
                    "description": "Leverage of the order",
                    "type": "number",
                    "format": "double",
                    "multipleOf": 0.01,
                    "minimum": 1
                  },
                  "quantity": {
                    "description": "Quantity or margin should be filled",
                    "format": "double",
                    "multipleOf": 0.5,
                    "minimum": 1,
                    "maximum": 10000000
                  },
                  "takeprofit": {
                    "description": "Takeprofit level",
                    "type": "number",
                    "format": "double",
                    "multipleOf": 0.5,
                    "minimum": 1,
                    "maximum": 10000000
                  },
                  "stoploss": {
                    "description": "Stoploss level",
                    "type": "number",
                    "format": "double",
                    "multipleOf": 0.5,
                    "minimum": 1,
                    "maximum": 10000000
                  },
                  "price": {
                    "description": "Required when using a limit order",
                    "type": "number",
                    "format": "double",
                    "multipleOf": 0.5,
                    "minimum": 1,
                    "maximum": 10000000
                  }
                },
                "example": {
                  "type": "l",
                  "side": "b",
                  "price": 10000,
                  "stoploss": 9000,
                  "takeprofit": 11000,
                  "quantity": 100,
                  "leverage": 50
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Position successfully created.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "description": "UUID of the position",
                      "type": "string"
                    },
                    "id": {
                      "description": "Position ID to be deprecated",
                      "type": "string"
                    },
                    "type": {
                      "description": "Position type [l,m]",
                      "type": "string",
                      "enum": [
                        "l",
                        "m"
                      ]
                    },
                    "side": {
                      "description": "Side of the position [s,b]",
                      "type": "string",
                      "enum": [
                        "s",
                        "b"
                      ]
                    },
                    "price": {
                      "description": "Entry price of the position",
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity of the position",
                      "type": "string"
                    },
                    "margin": {
                      "description": "Margin used for the position creation",
                      "type": "string"
                    },
                    "leverage": {
                      "description": "Leverage of the position",
                      "type": "string"
                    },
                    "liquidation": {
                      "description": "Liquidation level when the position will be closed",
                      "type": "string"
                    },
                    "market_filled_ts": {
                      "description": "When the order was filled",
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "market_wi": {
                      "description": "Market working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ]
                    },
                    "pl": {
                      "description": "PL of the position",
                      "type": "string"
                    },
                    "margin_wi": {
                      "description": "Margin working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ]
                    },
                    "stoploss": {
                      "description": "stoploss level",
                      "type": "string",
                      "nullable": true
                    },
                    "stoploss_wi": {
                      "description": "Stoploss working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ],
                      "nullable": true
                    },
                    "takeprofit": {
                      "description": "Takeprofit level",
                      "type": "string",
                      "nullable": true
                    },
                    "takeprofit_wi": {
                      "description": "Takeprofit working indicator [filled, running, closed, canceled]",
                      "type": "string",
                      "enum": [
                        "filled",
                        "running",
                        "closed",
                        "canceled"
                      ],
                      "nullable": true
                    },
                    "creation_ts": {
                      "description": "When the position was created",
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "example": {
                    "pid": "249dc818-f8a5-4713-a3a3-8fe85f2e8969",
                    "id": 666,
                    "type": "m",
                    "takeprofit_wi": "running",
                    "takeprofit": 13337,
                    "stoploss_wi": "running",
                    "stoploss": 1337,
                    "side": "s",
                    "quantity": 42,
                    "price": 8888,
                    "pl": -13640,
                    "market_wi": "filled",
                    "market_filled_ts": "020-09-15T10:50:40.332Z",
                    "margin_wi": "running",
                    "margin": 424242,
                    "liquidation": 1000,
                    "leverage": 50,
                    "creation_ts": "020-09-15T10:50:40.332Z"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Futures"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "positions_modify"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Update",
        "description": "Allows user to modify `stoploss` or `takeprofit` parameters of an existing position.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "pid",
                  "type",
                  "value"
                ],
                "properties": {
                  "pid": {
                    "type": "string",
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "takeprofit",
                      "stoploss"
                    ]
                  },
                  "value": {
                    "type": "number",
                    "multipleOf": 0.5,
                    "minimum": 0,
                    "maximum": 10000000
                  }
                },
                "example": {
                  "pid": "b87eef8a-52ab-2fea-1adc-c41fba870b0f",
                  "type": "takeprofit",
                  "value": 13290.5
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Says whether or not the position was updated.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "description": "Position id",
                      "type": "string",
                      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
                    }
                  },
                  "example": {
                    "pid": "b87eef8a-52ab-2fea-1adc-c41fba870b0f"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/history/bid-offer": {
      "get": {
        "tags": [
          "Futures"
        ],
        "security": [],
        "summary": "Bid and offer history",
        "description": "Retrieves bid and offer at most 1000 entries between two given timestamps.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Starting timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162757621
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Ending timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162857621
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "minimum": 1,
              "maximum": 100,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Futures bid offer history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "description": "Timestamp at which the data was recorded (in µs)",
                        "type": "integer",
                        "format": "int64"
                      },
                      "bid": {
                        "description": "Bid value at that time",
                        "type": "number"
                      },
                      "offer": {
                        "description": "Offer value at that time",
                        "type": "number"
                      }
                    }
                  },
                  "example": {
                    "data": [
                      {
                        "time": 1605633250615990,
                        "bid": 15853,
                        "offer": 15885
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/history/fixing": {
      "get": {
        "tags": [
          "Futures"
        ],
        "security": [],
        "summary": "Fixing history",
        "description": "Retrieves at most 1000 entries between two given timestamps",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Starting timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162757621
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Ending timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162857621
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "minimum": 1,
              "maximum": 100,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fixing history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ts": {
                        "description": "Timestamp in ms when the fixing occurred",
                        "type": "integer",
                        "format": "int64"
                      },
                      "id": {
                        "description": "Fixing uuid",
                        "type": "number"
                      },
                      "fixing_price": {
                        "description": "Fixing price",
                        "type": "number"
                      },
                      "fee_percent_value": {
                        "description": "value of fees in %",
                        "type": "number"
                      }
                    }
                  },
                  "example": {
                    "data": [
                      {
                        "ts": 1605633250615990,
                        "id": "46b6cd74-d91d-4f25-8a55-1cde32a9341c",
                        "fixing_price": 15885,
                        "fee_percent_value": 0.01
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/history/index": {
      "get": {
        "tags": [
          "Futures"
        ],
        "security": [],
        "summary": "Index history",
        "description": "Retrieves index history at most 1000 entries between two given timestamps.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Starting timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162757621
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Ending timestamp (in ms).",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162857621
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "minimum": 1,
              "maximum": 100,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Futures index history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "description": "Timestamp at which the data was recorded (in µs)",
                        "type": "integer",
                        "format": "int64"
                      },
                      "index": {
                        "description": "Index value at that time",
                        "type": "number"
                      }
                    }
                  },
                  "example": {
                    "data": [
                      {
                        "time": 1605633250615990,
                        "index": 15853
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/instrument": {
      "get": {
        "tags": [
          "Futures"
        ],
        "security": [],
        "summary": "Instrument",
        "description": "Retrieves the configuration related to futures trading on the platform",
        "responses": {
          "200": {
            "description": "Futures configuration successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "max_positions_count": {
                      "description": "The maximum number of open positions a user can have simultaneously",
                      "type": "number"
                    },
                    "max_margin": {
                      "description": "The maximum total margin a user can have simultaneously",
                      "type": "number"
                    },
                    "max_leverage": {
                      "description": "The maximum leverage a user can have on a position",
                      "type": "number"
                    },
                    "carry_fees": {
                      "description": "The carry fees applied by LN Markets",
                      "type": "number"
                    }
                  },
                  "example": {
                    "max_positions_count": 50,
                    "max_margin": 1000000,
                    "max_leverage": 50,
                    "carry_fees": 0.1
                  }
                }
              }
            }
          }
        }
      }
    },
    "/futures/leaderboard": {
      "get": {
        "tags": [
          "App"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Leaderboard",
        "description": "Get the 10 first users by pl broke down by day/week/month/all-time\n",
        "responses": {
          "200": {
            "description": "Leaderboard successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "weekly": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "description": "Username or 'Anonymous' if the Leaderboard view is disabled\n"
                          },
                          "pl": {
                            "type": "integer",
                            "description": "Sum of every profits and losses of the user"
                          },
                          "direction": {
                            "type": "integer",
                            "description": "Positive if the user is moving up the leaderboard,\nnegative if he is moving down and 0 if staying in place\n"
                          }
                        }
                      }
                    },
                    "monthly": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "description": "Username or 'Anonymous' if the Leaderboard view is disabled\n"
                          },
                          "pl": {
                            "type": "integer",
                            "description": "Sum of every profits and losses of the user"
                          },
                          "direction": {
                            "type": "integer",
                            "description": "Positive if the user is moving up the leaderboard,\nnegative if he is moving down and 0 if staying in place\n"
                          }
                        }
                      }
                    },
                    "all-time": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "description": "Username or 'Anonymous' if the Leaderboard view is disabled\n"
                          },
                          "pl": {
                            "type": "integer",
                            "description": "Sum of every profits and losses of the user"
                          },
                          "direction": {
                            "type": "integer",
                            "description": "Positive if the user is moving up the leaderboard,\nnegative if he is moving down and 0 if staying in place\n"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "weekly": [
                    {
                      "username": "Bob",
                      "pl": 4242424242,
                      "direction": 1
                    },
                    {
                      "username": "Jean-Kevin",
                      "pl": 3491941,
                      "direction": -1
                    },
                    {
                      "username": "Roger",
                      "pl": 24013441,
                      "direction": 0
                    },
                    {
                      "username": "Laura",
                      "pl": 23126094,
                      "direction": 5
                    },
                    {
                      "username": "Marcus",
                      "pl": 1414019,
                      "direction": 3
                    },
                    {
                      "username": "Charles",
                      "pl": 242918,
                      "direction": -2
                    },
                    {
                      "username": "Antoine",
                      "pl": 99999,
                      "direction": -1
                    },
                    {
                      "username": "XXxRoBeRtLeBgDu24xXX",
                      "pl": 61491,
                      "direction": 0
                    },
                    {
                      "username": "CRYPTOKING",
                      "pl": 10000,
                      "direction": 0
                    },
                    {
                      "username": "HEY",
                      "pl": 3,
                      "direction": 0
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/futures/ticker": {
      "get": {
        "tags": [
          "Futures"
        ],
        "security": [],
        "summary": "Ticker",
        "description": "Retrieves the futures ticker",
        "responses": {
          "200": {
            "description": "Futures ticker successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bid": {
                      "description": "Last bid",
                      "type": "number"
                    },
                    "offer": {
                      "description": "Last offer",
                      "type": "number"
                    },
                    "index": {
                      "description": "Last index",
                      "type": "number"
                    }
                  },
                  "example": {
                    "bid": 58000,
                    "offer": 58000,
                    "index": 42000
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lnurl/auth": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Auth Verify",
        "description": "Verify the public key with the signature and the k1 to create a account or connect into a existing account.\nIf token is set to true, a token will be returned\nElse the connected state will be push over websockets the client\n",
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "LNURL type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "login"
              ],
              "example": "login"
            }
          },
          {
            "name": "k1",
            "in": "query",
            "description": "Hex encoded 32 bytes of challenge which is going to be signed by user private key.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-fA-F0-9]{64}$",
              "example": "kyNVmR6HDtAW2aplYk6XmmpDrIhvzzq6"
            }
          },
          {
            "name": "sig",
            "in": "query",
            "description": "Signature generated by the lightning wallet.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "qep5sAqwleQS27UdKLGNsCBTWB4soS45us9vJAbk1hMEdCAXoeB6IESi3Nz7SXJM"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "Public key of the lightning wallet.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Yc4h1Z5BZVmgmVQfIbdPWRVj9kHAo3uf"
            }
          },
          {
            "name": "hmac",
            "in": "query",
            "description": "HMAC signature used to secure LNURL.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "kuSHSXXDiP4qofiL2LGelesLLlRXUCJd"
            }
          },
          {
            "name": "jwt",
            "in": "query",
            "description": "Request will respond with a token",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Request will respond with a token",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "referral",
            "in": "query",
            "description": "Is the account created with an referral",
            "schema": {
              "type": "string",
              "example": "TaoWallet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Does the request succeed ?",
                      "type": "string"
                    },
                    "event": {
                      "description": "State of the user",
                      "type": "string"
                    },
                    "token": {
                      "description": "Token if asked",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "status": "OK",
                  "event": "LOGGEDIN"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Auth Request",
        "description": "LNURL string used to create an account or connect to a existing account.\nThe user wallet will sign a message using the provided k1 inside the LNURL.\nYou need to have a session cookie on the browser you are using to log in.\n",
        "parameters": [
          {
            "name": "socket_id",
            "in": "query",
            "description": "Websocket id used to send the auth state to LN Markets frontend",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bech32 encoded string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lnurl": {
                      "description": "LNURL used by the wallet",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "lnurl": "lnurl1dp68gup69uhkcmmrv9kxsmmnwsarxvpsxqhkcmn4wfkz7cflw3skw0tvdankjm3xdvcn6venvgcrjenpx3nrwdtpxsur2vfsvdjk2dfkxe3kgceexymkgcmrxpjkgc3jvgmrqdnzvvurjwtr89jk2dp4vccrxvmrvvmxzdehxuejv6rdv93n6wpkv56rxcf4xqcxgwfsvsuxget9vymnqcfnv43rgwfjv5ex2cn9vyckgwtyvejrgc3excekyetpx43rvd3nxeskxvm9xqcxvwtpv5mq9uwr0k"
                }
              }
            }
          }
        }
      }
    },
    "/lnurl/pay/address": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Lightning Address",
        "description": "Lightning Address",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "Username",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LNURL pay request response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "callback": {
                      "description": "Callback URL used by the wallet",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Type of LNURL, payRequest here.",
                      "type": "string"
                    },
                    "maxSendable": {
                      "description": "Max sendable amount in msat",
                      "type": "integer",
                      "format": "int32"
                    },
                    "minSendable": {
                      "description": "Min sendable amount in msat",
                      "type": "integer",
                      "format": "int32"
                    },
                    "metadata": {
                      "description": "Metadata json as string",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "tag": "payRequest",
                  "minSendable": 1000,
                  "maxSendable": 1000000,
                  "callback": "https://api.lnmarkets.com/v1/lnurl/pay",
                  "metadata": {}
                }
              }
            }
          }
        }
      }
    },
    "/lnurl/pay": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Pay (3) Finalize",
        "description": "LNURL Pay",
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": true,
            "description": "HMAC payload signature.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "query",
            "required": true,
            "description": "Nonce",
            "schema": {
              "type": "string",
              "minLength": 16,
              "maxLength": 16
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "User id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry",
            "in": "query",
            "description": "When the lnurl pay is expired",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "Amount to deposit in msat",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1000000
            }
          },
          {
            "name": "nonce",
            "in": "query",
            "description": "An optional parameter used to prevent server response caching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromnodes",
            "in": "query",
            "description": "An optional parameter with value set to comma separated nodeIds if payer wishes a service to provide payment routes starting from specified LN nodeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "An optional parameter to pass the LN WALLET user's comment to LN SERVICE",
            "allowEmptyValue": true,
            "allowReserved": true,
            "schema": {
              "type": "string",
              "nullable": true,
              "minLength": 0,
              "maxLength": 1500
            }
          },
          {
            "name": "proofofpayer",
            "in": "query",
            "description": "An optional ephemeral secp256k1 public key generated by payer, a corresponding private key should be retained by payer, a payee may later ask payer to provide a public key itself or sign a random message using corresponding private key and thus provide a proof of payer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LNURL pay response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pr": {
                      "description": "bech32-serialized lightning invoice",
                      "type": "string"
                    },
                    "disposable": {
                      "type": "boolean"
                    },
                    "routes": {
                      "type": "array"
                    },
                    "successAction": {
                      "type": "object",
                      "properties": {
                        "tag": {
                          "description": "message",
                          "type": "string"
                        },
                        "message": {
                          "description": "message",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "disposable": true
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Pay (1) Create",
        "description": "Create a LNURL Pay",
        "responses": {
          "200": {
            "description": "Return the LNURL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lnurl": {
                      "description": "LNURL for the users wallet",
                      "type": "string"
                    }
                  },
                  "example": {
                    "lnurl": "LNURL1DP68GURN8GHJ7UM9WFMXJCM99E3K7MF0V9CXJ0M385EKVCENXC6R2C35XVUKXEFCV5MKVV34X5EKZD3EV56NYD3HXQURZEPEXEJXXEPNXSCRVWFNV9NXZCN9XQ6XYEFHVGCXXCMYXYMNSERXFQ5FNS"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lnurl/pay/request": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Pay (1) Request",
        "description": "Response from the LNURL",
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": true,
            "description": "HMAC payload signature.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "query",
            "required": true,
            "description": "Nonce",
            "schema": {
              "type": "string",
              "minLength": 16,
              "maxLength": 16
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LNURL pay request response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "callback": {
                      "description": "Callback URL used by the wallet",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Type of LNURL, payRequest here.",
                      "type": "string"
                    },
                    "maxSendable": {
                      "description": "Max sendable amount in msat",
                      "type": "integer",
                      "format": "int32"
                    },
                    "minSendable": {
                      "description": "Min sendable amount in msat",
                      "type": "integer",
                      "format": "int32"
                    },
                    "metadata": {
                      "description": "Metadata json as string",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "tag": "payRequest",
                  "minSendable": 1000,
                  "maxSendable": 1000000,
                  "callback": "https://api.lnmarkets.com/v1/lnurl/pay",
                  "metadata": {}
                }
              }
            }
          }
        }
      }
    },
    "/lnurl/withdraw/address": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Withdraw to Lightning Address",
        "description": "Use Lightning Address to withdraw your sat !",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "required": true,
            "description": "Amount to withdraw in sat",
            "example": 1000,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": true,
            "description": "Lightning Address username@service.org",
            "example": "satoshi@lightning.ovh",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully withdrawn funds from account."
          }
        }
      }
    },
    "/lnurl/withdraw": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Withdraw (3) Final",
        "description": "Use LNURL to withdraw from the user balance.",
        "parameters": [
          {
            "name": "k1",
            "in": "query",
            "required": true,
            "description": "Random hex string to identify the user Lightning Wallet.",
            "example": "kyNVmR6HDtAW2aplYk6XmmpDrIhvzzq6",
            "schema": {
              "type": "string",
              "minLength": 64,
              "maxLength": 64
            }
          },
          {
            "name": "pr",
            "in": "query",
            "required": true,
            "description": "Bolt 11 invoice.",
            "example": "<invoice>",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully withdrawn funds from account"
          }
        }
      },
      "post": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Withdraw (1) Create",
        "description": "Create a LNURL Withdraw",
        "responses": {
          "200": {
            "description": "Return the LNURL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lnurl": {
                      "description": "LNURL for the users wallet",
                      "type": "string"
                    }
                  },
                  "example": {
                    "lnurl": "LNURL1DP68GURN8GHJ7UM9WFMXJCM99E3K7MF0V9CXJ0M385EKVCENXC6R2C35XVUKXEFCV5MKVV34X5EKZD3EV56NYD3HXQURZEPEXEJXXEPNXSCRVWFNV9NXZCN9XQ6XYEFHVGCXXCMYXYMNSERXFQ5FNS"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lnurl/withdraw/request": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Withdraw (2) Request",
        "description": "Ask the Lightning wallet to create an invoice with amount and description.",
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": true,
            "description": "HMAC payload signature.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "query",
            "required": true,
            "description": "Nonce.",
            "schema": {
              "type": "string",
              "minLength": 16,
              "maxLength": 16
            }
          },
          {
            "name": "expiry",
            "in": "query",
            "description": "Timestamp when the LNURL is expired.",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "example": 1599841538304
            }
          },
          {
            "name": "uid",
            "in": "query",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LNURL withdraw invoice parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "callback": {
                      "description": "Callback URL used by the wallet",
                      "type": "string"
                    },
                    "defaultDescription": {
                      "description": "Invoice default description",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Kind of LNURL",
                      "type": "string"
                    },
                    "balanceCheck": {
                      "type": "string"
                    },
                    "balanceNotify": {
                      "type": "string"
                    },
                    "maxWithdrawable": {
                      "description": "Max withdrawable amount",
                      "type": "integer",
                      "format": "int32"
                    },
                    "minWithdrawable": {
                      "description": "Min withdrawable amount",
                      "type": "integer",
                      "format": "int32"
                    },
                    "k1": {
                      "description": "Random hex string to identify the user Lightning Wallet.",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "k1": "31c92c1bd79d2ae5f96a153ceda105cb67888c61bfb76baa1d2505a6bf8a06ca",
                  "tag": "withdrawRequest",
                  "maxWithdrawable": 1000,
                  "minWithdrawable": 1000,
                  "defaultDescription": "LN Markets withdraw",
                  "callback": "https://api.lnmarkets.com/lnurl/w"
                }
              }
            }
          }
        }
      }
    },
    "/options/instrument": {
      "get": {
        "tags": [
          "Options"
        ],
        "security": [],
        "summary": "Instrument",
        "description": "Get the options configuration",
        "responses": {
          "200": {
            "description": "Options configuration successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "max_trades_count": {
                      "description": "The maximum amount of open trades",
                      "type": "number"
                    },
                    "max_quantity": {
                      "description": "The maximum of total quantity in open trades",
                      "type": "number"
                    }
                  },
                  "example": {
                    "max_trades_count": 50,
                    "max_quantity": 100000
                  }
                }
              }
            }
          }
        }
      }
    },
    "/options/vanilla": {
      "delete": {
        "tags": [
          "Options"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "vanilla_options_close"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Close",
        "description": "Close the user option trade, the PL will be calculated against the current bid or offer\ndepending on the type of the option\n",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the option to close.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "example": "a2ca6172-1078-463d-ae3f-8733f36a9b0e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trade is closed\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "trade": {
                      "description": "Trade id",
                      "type": "string"
                    },
                    "quantity": {
                      "description": "Quantity (in USD)",
                      "type": "integer"
                    },
                    "pl": {
                      "description": "PL of the trade",
                      "type": "integer"
                    },
                    "type": {
                      "description": "Type (call or put) of the option",
                      "type": "string"
                    },
                    "strike": {
                      "description": "Strike price of the option",
                      "type": "integer"
                    },
                    "volatility": {
                      "description": "Volatility (when opened)",
                      "type": "number"
                    },
                    "id": {
                      "description": "Option id",
                      "type": "string"
                    },
                    "uid": {
                      "description": "User id",
                      "type": "string"
                    },
                    "creation_ts": {
                      "description": "Trade created ts",
                      "type": "string",
                      "format": "date-time",
                      "nullable": false
                    },
                    "expiry_ts": {
                      "description": "Trade expiration ts",
                      "type": "string",
                      "format": "date-time",
                      "nullable": false
                    },
                    "closed": {
                      "description": "Is trade closed",
                      "type": "boolean"
                    },
                    "closed_ts": {
                      "description": "Trade close ts",
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "forward": {
                      "description": "Trade forward price",
                      "type": "integer"
                    },
                    "settlement": {
                      "description": "Settlement of trade (cash or physical)",
                      "type": "string"
                    },
                    "fixing_price": {
                      "description": "Trade fixing price",
                      "type": "integer"
                    }
                  },
                  "example": {
                    "trade": "a61faebc-7cc9-47e4-a22d-9d3e95c98323",
                    "quantity": 100,
                    "pl": -1575,
                    "type": "c",
                    "strike": 32000,
                    "volatility": 0.757,
                    "id": "a61faebc-7cc9-47e4-a22d-9d3e95c98323",
                    "uid": "b1d31a25-df43-4120-b0b4-8634db8860d2",
                    "creation_ts": "2022-06-01T07:49:48.304Z",
                    "expiry_ts": "2022-06-02T07:49:00.000Z",
                    "closed": true,
                    "closed_ts": "2022-06-01T07:49:58.989Z",
                    "forward": 31031,
                    "settlement": "cash",
                    "fixing_price": 30969
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Options"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "vanilla_options_get"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Trades",
        "description": "Get user's vanilla options trades",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Choose which kind of positions you need to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "running",
                "closed"
              ],
              "example": "open",
              "default": "running"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Starting timestamp (in ms) (only used for closed positions)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162757621
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Ending timestamp (in ms) (only used for closed positions)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1605162857621
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows (only used for closed positions)",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "minimum": 1,
              "maximum": 100,
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vanilla options trade array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "id of the trade",
                        "type": "string",
                        "format": "uuid"
                      },
                      "type": {
                        "description": "Trade type [c,p]",
                        "type": "string",
                        "enum": [
                          "c",
                          "p"
                        ]
                      },
                      "side": {
                        "description": "Trade side [s,b]",
                        "type": "string",
                        "enum": [
                          "s",
                          "b"
                        ]
                      },
                      "forward": {
                        "description": "Trade initial forward",
                        "type": "number"
                      },
                      "delta": {
                        "description": "Trade initial delta",
                        "type": "integer",
                        "format": "int32"
                      },
                      "strike": {
                        "description": "Trade strike",
                        "type": "integer",
                        "format": "int32"
                      },
                      "volatility": {
                        "description": "Trade volatility",
                        "type": "number"
                      },
                      "quantity": {
                        "description": "Trade quantity",
                        "type": "integer",
                        "format": "int32"
                      },
                      "margin": {
                        "description": "Trade margin paid",
                        "type": "integer",
                        "format": "int32"
                      },
                      "pl": {
                        "description": "Trade pl",
                        "type": "integer",
                        "format": "int32"
                      },
                      "creation_ts": {
                        "description": "When the trade was created",
                        "type": "integer",
                        "format": "int32"
                      },
                      "expiry_ts": {
                        "description": "When the trade was created",
                        "type": "integer",
                        "format": "int32"
                      },
                      "domestic": {
                        "description": "domestic currency",
                        "type": "string"
                      },
                      "settlement": {
                        "description": "How the trade is delivered",
                        "type": "string"
                      },
                      "closed": {
                        "description": "Is the trade closed",
                        "type": "boolean"
                      }
                    }
                  },
                  "example": [
                    {
                      "id": "249dc818-f8a5-4713-a3a3-8fe85f2e8969",
                      "type": "c",
                      "side": "b",
                      "volatility": 0.1337,
                      "quantity": 1337,
                      "strike": 69420,
                      "forward": 1337,
                      "delta": 13,
                      "margin": 1234,
                      "pl": 0,
                      "domestic": "BTC",
                      "settlement": "physical",
                      "creation_ts": 1643385060268,
                      "expiry_ts": 1643385060268,
                      "closed": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Options"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "vanilla_options_order"
            ]
          }
        ],
        "deprecated": false,
        "summary": "New trade",
        "description": "Create a new options trade",
        "requestBody": {
          "description": "Body with the needed parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "side",
                  "type",
                  "quantity",
                  "strike",
                  "expiry",
                  "settlement"
                ],
                "properties": {
                  "side": {
                    "description": "Side of the order (Only buy currently)",
                    "type": "string",
                    "enum": [
                      "b"
                    ]
                  },
                  "type": {
                    "description": "Type of the order (Call or Put)",
                    "type": "string",
                    "enum": [
                      "c",
                      "p"
                    ]
                  },
                  "quantity": {
                    "description": "Quantity in USD",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "strike": {
                    "description": "Strike",
                    "type": "number",
                    "format": "int32",
                    "multipleOf": 1000
                  },
                  "expiry": {
                    "description": "Expiry date (either '24H' or a date in RFC3339 full-date format YYYY-MM-DD)",
                    "type": "string"
                  },
                  "settlement": {
                    "description": "Type of settlement",
                    "type": "string",
                    "enum": [
                      "physical",
                      "cash"
                    ]
                  }
                },
                "example": {
                  "type": "c",
                  "side": "b",
                  "quantity": 100,
                  "strike": 42000,
                  "expiry": "2016-01-14T00:00:00.000Z",
                  "settlement": "cash"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trade submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "id of the trade",
                      "type": "string",
                      "format": "uuid"
                    },
                    "type": {
                      "description": "Trade type [c,p]",
                      "type": "string",
                      "enum": [
                        "c",
                        "p"
                      ]
                    },
                    "side": {
                      "description": "Trade side [s,b]",
                      "type": "string",
                      "enum": [
                        "s",
                        "b"
                      ]
                    },
                    "forward": {
                      "description": "Trade initial forward",
                      "type": "number"
                    },
                    "delta": {
                      "description": "Trade initial delta",
                      "type": "integer",
                      "format": "int32"
                    },
                    "strike": {
                      "description": "Trade strike",
                      "type": "integer",
                      "format": "int32"
                    },
                    "volatility": {
                      "description": "Trade volatility",
                      "type": "number"
                    },
                    "quantity": {
                      "description": "Trade quantity",
                      "type": "integer",
                      "format": "int32"
                    },
                    "margin": {
                      "description": "Trade margin paid",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pl": {
                      "description": "Trade pl",
                      "type": "integer",
                      "format": "int32"
                    },
                    "creation_ts": {
                      "description": "When the trade was created",
                      "type": "integer",
                      "format": "int32"
                    },
                    "expiry_ts": {
                      "description": "When the trade was created",
                      "type": "integer",
                      "format": "int32"
                    },
                    "domestic": {
                      "description": "domestic currency",
                      "type": "string"
                    },
                    "settlement": {
                      "description": "How the trade is delivered",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "pid": "249dc818-f8a5-4713-a3a3-8fe85f2e8969",
                  "id": 666,
                  "type": "c",
                  "side": "b",
                  "volatility": 0.1337,
                  "quantity": 1337,
                  "strike": 69420,
                  "forward": 1337,
                  "delta": 13,
                  "margin": 1234,
                  "pl": 0,
                  "domestic": "BTC",
                  "settlement": "physical",
                  "creation_ts": 1643385060268,
                  "expiry_ts": 1643385060268
                }
              }
            }
          }
        }
      }
    },
    "/options/volatility": {
      "get": {
        "tags": [
          "Options"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Volatility",
        "description": "Return the volatility",
        "parameters": [
          {
            "name": "instrument",
            "in": "query",
            "description": "Which instrument's volatility to fetch. Omit this parameter to get the volatility index.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "BTC.2016-01-14.20000.C"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticker successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "volatility": {
                      "type": "number",
                      "description": "Current volatility (as decimal number)."
                    }
                  },
                  "example": {
                    "volatility": 1.337
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/deposit": {
      "get": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "wallet_deposit"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Deposit History",
        "description": "Get deposit history",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start of the time interval (UNIX UTC timestamp)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1590969600000
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End of the time interval (UNIX UTC timestamp)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1603065600000
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of transactions to fetch",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History successfully pulled.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Deposit ID in case of deposit",
                            "type": "string"
                          },
                          "amount": {
                            "description": "Amount in sat",
                            "type": "integer"
                          },
                          "creation_ts": {
                            "description": "When the transaction was initiated",
                            "type": "string",
                            "format": "date-time"
                          },
                          "payment_hash": {
                            "type": "string",
                            "example": "33f45c13c7ddcae46c6732414552893ca599f9399c62ffc2cfae209e8b17c5c3"
                          },
                          "success": {
                            "type": "boolean",
                            "example": false
                          },
                          "success_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "example": null
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "transaction": [
                      {
                        "id": "269157f3-d4a1-4493-afcb-5e8fdaa49288",
                        "amount": 99400,
                        "creation_ts": "020-09-15T10:50:40.332Z",
                        "success": true,
                        "payment_hash": "33f45c13c7ddcae46c6732414552893ca599f9399c62ffc2cfae209e8b17c5c3",
                        "success_ts": "020-09-15T10:50:40.332Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "wallet_deposit"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Deposit",
        "description": "Add fund to your LN Markets balance",
        "requestBody": {
          "description": "Payload that contains all information to initialize a new deposit.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "description": "Amount of sat to deposit on the account",
                    "type": "integer",
                    "minimum": 1000
                  }
                },
                "example": {
                  "amount": 1000
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New deposit entry in database waiting for payment. Using `paymentRequest` afterwards, user will confirm the deposit and funds will be added to his account.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "paymentRequest": {
                      "description": "Invoice you should pay to add balance to your account",
                      "type": "string"
                    },
                    "expiry": {
                      "description": "When the invoice will expiry",
                      "type": "integer"
                    }
                  },
                  "example": {
                    "paymentRequest": "lntb100u1p0jrfz0pp5q0ntrkf052dvep8w6vf0z77rek3fz8xm6c2yau4zhy7f4mzauqgsdzcf3hy6ctjddjhgueqg3jhqmmnd96zqgmxxquryvesvv6z6dehv43z6drpvycj6wfevs6j6dmyxcunxefcxccxxvn9cqzpgxqzpdsp5z40mxcrfqtsxf55u9ju3lvqdw36htsjh4xl2ujrzdff3953fg2yq9qy9qsqv7gfvp0tryme3e8r5xfrpg39j645302fkggps4h5j0aj708lzdgh2dq3pdz6lqazgvkt3wm7qq20vcff46vu5549m3v2d6h0uw3sjacqrkjqcv",
                    "expiry": 45
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "user_get"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Information",
        "description": "Get the user account Information",
        "responses": {
          "200": {
            "description": "User information\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "description": "User's UUID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "username": {
                      "description": "Username",
                      "type": "string"
                    },
                    "account_type": {
                      "description": "One of [lnurl, credentials, joule]",
                      "type": "string",
                      "enum": [
                        "lnurl",
                        "credentials",
                        "joule"
                      ]
                    },
                    "linkingpublickey": {
                      "description": "Public key used for lnurl or joule account",
                      "type": "string"
                    }
                  },
                  "example": {
                    "uid": "d068f829-26e6-4743-b10d-ebb5a83b3624",
                    "balance": 361086,
                    "account_type": "joule",
                    "username": "Satoshi",
                    "linkingpublickey": "035555cbdd2b5642bbd196b31df477fad20125ae99119fd5ffb1d42c7f4811dd3a"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "user_modify"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Update user",
        "description": "Modifies account parameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "additionalProperties": false,
                "properties": {
                  "show_leaderboard": {
                    "description": "Show the user name in the PL leaderboard",
                    "type": "boolean"
                  },
                  "use_taproot_addresses": {
                    "description": "Use taproot addresses for on-chain deposits",
                    "type": "boolean"
                  },
                  "username": {
                    "description": "Username displayed on LN Markets public data",
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_.]{1,32}$"
                  }
                },
                "example": {
                  "show_leaderboard": true,
                  "username": "Cryptoking"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User information\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "description": "User's UUID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "balance": {
                      "description": "User current balance (available)",
                      "type": "integer"
                    },
                    "username": {
                      "description": "Username",
                      "type": "string"
                    },
                    "account_type": {
                      "description": "One of [lnurl, credentials, joule]",
                      "type": "string",
                      "enum": [
                        "lnurl",
                        "credentials",
                        "joule"
                      ]
                    },
                    "linkingpublickey": {
                      "description": "Public key used for lnurl or joule account",
                      "type": "string"
                    },
                    "use_taproot_addresses": {
                      "description": "Use taproot addresses for on-chain deposits",
                      "type": "boolean"
                    }
                  },
                  "example": {
                    "uid": "d068f829-26e6-4743-b10d-ebb5a83b3624",
                    "balance": 361086,
                    "account_type": "joule",
                    "username": "Satoshi",
                    "linkingpublickey": "035555cbdd2b5642bbd196b31df477fad20125ae99119fd5ffb1d42c7f4811dd3a",
                    "use_taproot_addresses": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/withdraw": {
      "get": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "wallet_withdraw"
            ]
          }
        ],
        "deprecated": false,
        "summary": "Withdraw History",
        "description": "Ge withdraw history\n",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start of the time interval (UNIX UTC timestamp)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1590969600000
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End of the time interval (UNIX UTC timestamp)",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1603065600000
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of transactions to fetch",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 10,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History successfully pulled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Withdraw ID in case of withdraw",
                            "type": "string"
                          },
                          "amount": {
                            "description": "Amount in sat",
                            "type": "integer"
                          },
                          "creation_ts": {
                            "description": "When the transaction was initiated",
                            "type": "string",
                            "format": "date-time"
                          },
                          "fee": {
                            "description": "Withdraw fee",
                            "type": "integer",
                            "example": 42
                          },
                          "error": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "payment_hash": {
                            "type": "string",
                            "example": "33f45c13c7ddcae46c6732414552893ca599f9399c62ffc2cfae209e8b17c5c3"
                          },
                          "success": {
                            "type": "boolean",
                            "example": false
                          },
                          "success_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "example": null
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "transaction": [
                      {
                        "id": "269157f3-d4a1-4493-afcb-5e8fdaa49288",
                        "amount": 99400,
                        "creation_ts": "020-09-15T10:50:40.332Z",
                        "success": true,
                        "payment_hash": "33f45c13c7ddcae46c6732414552893ca599f9399c62ffc2cfae209e8b17c5c3",
                        "success_ts": "020-09-15T10:50:40.332Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "apiKeyAuth": [
              "wallet_withdraw"
            ]
          }
        ],
        "summary": "Withdraw via invoice",
        "description": "Withdraw from LN Markets with a Lightning Invoice",
        "requestBody": {
          "description": "Payload that contains all information to initiate a new withdraw.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "invoice"
                ],
                "properties": {
                  "invoice": {
                    "description": "Bolt 11 invoice with the same amount as the request withdraw amount",
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  }
                },
                "example": {
                  "invoice": "lntb100u1p0jr0ykpp5ldx3un8ym6z0uwjxd083mp2rcr04d2dv0fkx729ajs62pq9pfjqqdql23jhxapdwa5hg6rywfshwttjda6hgegcqzpgxq92fjuqsp5m6q0fzynu2qr624mzjc285duurhccmkfg94mcdctc0p9s7qkrq8q9qy9qsqp862cjznpey5r76e7amhlpmhwn2c7xvke59srhv0xf75m4ksjm4hzn8y9xy0zs5ec6gxmsr8gj4q23w8ped32llscjcneyjz2afeapqpu4gamz"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Funds are removed from user account and added to user wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "description": "Amount withdrawn",
                      "type": "integer"
                    },
                    "fees": {
                      "description": "Amount of fees payed",
                      "type": "integer"
                    },
                    "payment_secret": {
                      "description": "Payment secret of the settled invoice",
                      "type": "string"
                    },
                    "id": {
                      "description": "Withdraw ID",
                      "type": "string"
                    },
                    "payment_hash": {
                      "description": "Payment hash for the settled invoice",
                      "type": "string"
                    }
                  },
                  "example": {
                    "amount": 1000,
                    "payment_secret": "1b84c9852e929f99700b6cbabc4ca9d1593afc3736938b348c4d3d143e418bd4",
                    "id": "3fcbd8b7-c35b-4e83-87bc-111d5bd186b7",
                    "payment_hash": "fb4d1e4ce4de84fe3a466bcf1d8543c0df56a9ac7a6c6f28bd9434a080a14c80"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}